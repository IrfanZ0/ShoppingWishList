plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.google.gms.google-services'
    id("com.google.devtools.ksp") version "1.9.0-1.0.11" apply false

}

android {
    namespace 'com.tritongames.shoppingwishlist'
    compileSdk 34

    defaultConfig {
        applicationId "com.tritongames.shoppingwishlist"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        Properties properties = new Properties()
        properties.load(project.rootProject.file("secrets.properties").newDataInputStream())


        buildConfigField "String", "BEST_BUY_API_KEY", "\"${properties.getProperty("BEST_BUY_API_KEY")}\""
        buildConfigField "String", "GOOGLE_MAPS_API_KEY", "\"${properties.getProperty("GOOGLE_MAPS_API_KEY")}\""
        buildConfigField "String", "FIREBASE_API_KEY", "\"${properties.getProperty("FIREBASE_API_KEY")}\""
        buildConfigField "String", "STRIPE_API_KEY", "\"${properties.getProperty("STRIPE_API_KEY")}\""
    }


    buildFeatures {
        viewBinding true
        compose true
        buildConfig true
    }

    configurations {
        implementation.exclude module: 'protobuf-java'
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.3"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true

        }
        debug {
            debuggable true
            jniDebuggable true
            testCoverageEnabled false
        }
        debuggable.initWith(buildTypes.debug)
        debuggable {
            testCoverageEnabled = false
            debuggable true
            jniDebuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }


}



hilt {
    enableAggregatingTask false
}
dependencies {

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    //Annotation
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.privacysandbox.tools:tools-core:1.0.0-alpha08'
    implementation 'com.google.firebase:firebase-storage-ktx:21.0.0'
    implementation 'com.android.tools.compose:compose-preview-renderer:0.0.1-alpha01'

    //Junit 4
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'

    //Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //Fragment
    // Kotlin
    implementation 'androidx.fragment:fragment-ktx:1.7.0'

    //Dagger - Hilt
    implementation 'com.google.dagger:hilt-android:2.51.1'
    kapt 'com.google.dagger:hilt-android-compiler:2.51.1'
    kapt "androidx.hilt:hilt-compiler:1.2.0"


    // Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:1.9.0"



    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'

    // GlideImage
    implementation "com.github.bumptech.glide:compose:1.0.0-beta01"


    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.14'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0'

    // Coroutine Lifecycle Scopes
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'

    //Coroutine testing
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0'

    // Import the Firebase BoM
    implementation(platform('com.google.firebase:firebase-bom:33.0.0'))

    // When using the BoM, you don't specify versions in Firebase library dependencies

    // TODO: Add the dependencies for Firebase products you want to use
    // See https://firebase.google.com/docs/android/setup#available-libraries
    // For example, add the dependencies for Firebase Authentication and Cloud Firestore
    implementation('com.google.firebase:firebase-auth-ktx:23.0.0')
    implementation('com.google.firebase:firebase-firestore-ktx:25.0.0')

    // For instrumented tests.
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.51.1'
    // with Kotlin
            kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.51.1'
    // ...with Java.
    androidTestAnnotationProcessor 'com.google.dagger:hilt-android-compiler:2.51.1'

    // Google Maps for Android
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    implementation 'com.google.android.libraries.places:places:3.4.0'
    implementation 'com.google.maps.android:maps-compose:5.0.0'

    // DataStore (SharedPreference replacement)
    implementation 'androidx.datastore:datastore-preferences:1.1.1'

    // Stripe Android SDK
    implementation 'com.stripe:stripe-android:20.42.0'
    implementation 'com.stripe:stripe-java:25.5.0'

  // Volley
    implementation 'com.android.volley:volley:1.2.1'

  //Multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    // Compose
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material3:material3:1.2.1"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-test-junit4"


    // Choose one of the following:
    // Material Design 3
    implementation 'androidx.compose.material3:material3'
    // or Material Design 2
    implementation 'androidx.compose.material:material'
    // or skip Material Design and build directly on top of foundational components
    implementation 'androidx.compose.foundation:foundation'
    // or only import the main APIs for the underlying toolkit systems,
    // such as input and measurement/layout
    implementation 'androidx.compose.ui:ui'

    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation 'androidx.compose.material:material-icons-core'
    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'
    // Optional - Add window size utils
    implementation 'androidx.compose.material3:material3-window-size-class'

    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.9.0'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata:1.7.0-alpha08'
    // Optional - Integration with RxJava
    implementation 'androidx.compose.runtime:runtime-rxjava2'


}





